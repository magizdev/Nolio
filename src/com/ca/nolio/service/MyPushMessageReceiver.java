package com.ca.nolio.service;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.json.JSONException;
import org.json.JSONObject;

import android.content.Context;
import android.content.Intent;
import android.text.TextUtils;
import android.util.Log;

import com.baidu.frontia.api.FrontiaPushMessageReceiver;
import com.ca.nolio.DeploymentListFragement;
import com.ca.nolio.LoginActivity;
import com.ca.nolio.MainActivity;
import com.ca.nolio.interfaces.INolioServiceCallback;
import com.ca.nolio.util.Configuration;
import com.ca.nolio.util.Utils;

public class MyPushMessageReceiver extends FrontiaPushMessageReceiver implements INolioServiceCallback {
    /** TAG to Log */
    public static final String TAG = MyPushMessageReceiver.class
            .getSimpleName();
    
    private static final String SERVICE_BASE_URL = "http://%s:8080/datamanagement/a/shallow_applications?DeviceId=%s";

    @Override
    public void onBind(Context context, int errorCode, String appid,
            String userId, String channelId, String requestId) {
        String responseString = "onBind errorCode=" + errorCode + " appid="
                + appid + " userId=" + userId + " channelId=" + channelId
                + " requestId=" + requestId;
        Log.d(TAG, responseString);

        if (errorCode == 0) {
            Utils.setBind(context, true);
        }
        Configuration configuration = Configuration.getConfiguration(context);
		NolioService nolioServiceCall = new NolioService(
				NolioService.GET, context, null,
				"", MyPushMessageReceiver.this);
		nolioServiceCall.execute(String.format(SERVICE_BASE_URL,
				configuration.getServer(), channelId));
    }

    /**
     * æŽ¥æ”¶é€?ä¼ æ¶ˆæ?¯çš„å‡½æ•°ã€‚
     * 
     * @param context
     *            ä¸Šä¸‹æ–‡
     * @param message
     *            æŽ¨é€?çš„æ¶ˆæ?¯
     * @param customContentString
     *            è‡ªå®šä¹‰å†…å®¹,ä¸ºç©ºæˆ–è€…jsonå­—ç¬¦ä¸²
     */
    @Override
    public void onMessage(Context context, String message,
            String customContentString) {
        String messageString = "é€?ä¼ æ¶ˆæ?¯ message=\"" + message
                + "\" customContentString=" + customContentString;
        Log.d(TAG, messageString);

        // è‡ªå®šä¹‰å†…å®¹èŽ·å?–æ–¹å¼?ï¼Œmykeyå’Œmyvalueå¯¹åº”é€?ä¼ æ¶ˆæ?¯æŽ¨é€?æ—¶è‡ªå®šä¹‰å†…å®¹ä¸­è®¾ç½®çš„é”®å’Œå€¼
        if (!TextUtils.isEmpty(customContentString)) {
            JSONObject customJson = null;
            try {
                customJson = new JSONObject(customContentString);
                String myvalue = null;
                if (!customJson.isNull("mykey")) {
                    myvalue = customJson.getString("mykey");
                }
            } catch (JSONException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

        // Demoæ›´æ–°ç•Œé?¢å±•ç¤ºä»£ç ?ï¼Œåº”ç”¨è¯·åœ¨è¿™é‡ŒåŠ å…¥è‡ªå·±çš„å¤„ç?†é€»è¾‘
        updateContent(context, messageString);
    }

    /**
     * æŽ¥æ”¶é€šçŸ¥ç‚¹å‡»çš„å‡½æ•°ã€‚æ³¨ï¼šæŽ¨é€?é€šçŸ¥è¢«ç”¨æˆ·ç‚¹å‡»å‰?ï¼Œåº”ç”¨æ— æ³•é€šè¿‡æŽ¥å?£èŽ·å?–é€šçŸ¥çš„å†…å®¹ã€‚
     * 
     * @param context
     *            ä¸Šä¸‹æ–‡
     * @param title
     *            æŽ¨é€?çš„é€šçŸ¥çš„æ ‡é¢˜
     * @param description
     *            æŽ¨é€?çš„é€šçŸ¥çš„æ??è¿°
     * @param customContentString
     *            è‡ªå®šä¹‰å†…å®¹ï¼Œä¸ºç©ºæˆ–è€…jsonå­—ç¬¦ä¸²
     */
    @Override
    public void onNotificationClicked(Context context, String title,
            String description, String customContentString) {
        String notifyString = "é€šçŸ¥ç‚¹å‡» title=\"" + title + "\" description=\""
                + description + "\" customContent=" + customContentString;
        Log.d(TAG, notifyString);

        // è‡ªå®šä¹‰å†…å®¹èŽ·å?–æ–¹å¼?ï¼Œmykeyå’Œmyvalueå¯¹åº”é€šçŸ¥æŽ¨é€?æ—¶è‡ªå®šä¹‰å†…å®¹ä¸­è®¾ç½®çš„é”®å’Œå€¼
        if (!TextUtils.isEmpty(customContentString)) {
            JSONObject customJson = null;
            try {
                customJson = new JSONObject(customContentString);
                String myvalue = null;
                if (!customJson.isNull("mykey")) {
                    myvalue = customJson.getString("mykey");
                }
            } catch (JSONException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

        // Demoæ›´æ–°ç•Œé?¢å±•ç¤ºä»£ç ?ï¼Œåº”ç”¨è¯·åœ¨è¿™é‡ŒåŠ å…¥è‡ªå·±çš„å¤„ç?†é€»è¾‘
        updateContent(context, notifyString);
    }

    /**
     * setTags() çš„å›žè°ƒå‡½æ•°ã€‚
     * 
     * @param context
     *            ä¸Šä¸‹æ–‡
     * @param errorCode
     *            é”™è¯¯ç ?ã€‚0è¡¨ç¤ºæŸ?äº›tagå·²ç»?è®¾ç½®æˆ?åŠŸï¼›é?ž0è¡¨ç¤ºæ‰€æœ‰tagçš„è®¾ç½®å?‡å¤±è´¥ã€‚
     * @param successTags
     *            è®¾ç½®æˆ?åŠŸçš„tag
     * @param failTags
     *            è®¾ç½®å¤±è´¥çš„tag
     * @param requestId
     *            åˆ†é…?ç»™å¯¹äº‘æŽ¨é€?çš„è¯·æ±‚çš„id
     */
    @Override
    public void onSetTags(Context context, int errorCode,
            List<String> sucessTags, List<String> failTags, String requestId) {
        String responseString = "onSetTags errorCode=" + errorCode
                + " sucessTags=" + sucessTags + " failTags=" + failTags
                + " requestId=" + requestId;
        Log.d(TAG, responseString);

        // Demoæ›´æ–°ç•Œé?¢å±•ç¤ºä»£ç ?ï¼Œåº”ç”¨è¯·åœ¨è¿™é‡ŒåŠ å…¥è‡ªå·±çš„å¤„ç?†é€»è¾‘
        updateContent(context, responseString);
    }

    /**
     * delTags() çš„å›žè°ƒå‡½æ•°ã€‚
     * 
     * @param context
     *            ä¸Šä¸‹æ–‡
     * @param errorCode
     *            é”™è¯¯ç ?ã€‚0è¡¨ç¤ºæŸ?äº›tagå·²ç»?åˆ é™¤æˆ?åŠŸï¼›é?ž0è¡¨ç¤ºæ‰€æœ‰tagå?‡åˆ é™¤å¤±è´¥ã€‚
     * @param successTags
     *            æˆ?åŠŸåˆ é™¤çš„tag
     * @param failTags
     *            åˆ é™¤å¤±è´¥çš„tag
     * @param requestId
     *            åˆ†é…?ç»™å¯¹äº‘æŽ¨é€?çš„è¯·æ±‚çš„id
     */
    @Override
    public void onDelTags(Context context, int errorCode,
            List<String> sucessTags, List<String> failTags, String requestId) {
        String responseString = "onDelTags errorCode=" + errorCode
                + " sucessTags=" + sucessTags + " failTags=" + failTags
                + " requestId=" + requestId;
        Log.d(TAG, responseString);

        // Demoæ›´æ–°ç•Œé?¢å±•ç¤ºä»£ç ?ï¼Œåº”ç”¨è¯·åœ¨è¿™é‡ŒåŠ å…¥è‡ªå·±çš„å¤„ç?†é€»è¾‘
        updateContent(context, responseString);
    }

    /**
     * listTags() çš„å›žè°ƒå‡½æ•°ã€‚
     * 
     * @param context
     *            ä¸Šä¸‹æ–‡
     * @param errorCode
     *            é”™è¯¯ç ?ã€‚0è¡¨ç¤ºåˆ—ä¸¾tagæˆ?åŠŸï¼›é?ž0è¡¨ç¤ºå¤±è´¥ã€‚
     * @param tags
     *            å½“å‰?åº”ç”¨è®¾ç½®çš„æ‰€æœ‰tagã€‚
     * @param requestId
     *            åˆ†é…?ç»™å¯¹äº‘æŽ¨é€?çš„è¯·æ±‚çš„id
     */
    @Override
    public void onListTags(Context context, int errorCode, List<String> tags,
            String requestId) {
        String responseString = "onListTags errorCode=" + errorCode + " tags="
                + tags;
        Log.d(TAG, responseString);

        // Demoæ›´æ–°ç•Œé?¢å±•ç¤ºä»£ç ?ï¼Œåº”ç”¨è¯·åœ¨è¿™é‡ŒåŠ å…¥è‡ªå·±çš„å¤„ç?†é€»è¾‘
        updateContent(context, responseString);
    }

    /**
     * PushManager.stopWork() çš„å›žè°ƒå‡½æ•°ã€‚
     * 
     * @param context
     *            ä¸Šä¸‹æ–‡
     * @param errorCode
     *            é”™è¯¯ç ?ã€‚0è¡¨ç¤ºä»Žäº‘æŽ¨é€?è§£ç»‘å®šæˆ?åŠŸï¼›é?ž0è¡¨ç¤ºå¤±è´¥ã€‚
     * @param requestId
     *            åˆ†é…?ç»™å¯¹äº‘æŽ¨é€?çš„è¯·æ±‚çš„id
     */
    @Override
    public void onUnbind(Context context, int errorCode, String requestId) {
        String responseString = "onUnbind errorCode=" + errorCode
                + " requestId = " + requestId;
        Log.d(TAG, responseString);

        // è§£ç»‘å®šæˆ?åŠŸï¼Œè®¾ç½®æœªç»‘å®šflagï¼Œ
        if (errorCode == 0) {
            Utils.setBind(context, false);
        }
        // Demoæ›´æ–°ç•Œé?¢å±•ç¤ºä»£ç ?ï¼Œåº”ç”¨è¯·åœ¨è¿™é‡ŒåŠ å…¥è‡ªå·±çš„å¤„ç?†é€»è¾‘
        updateContent(context, responseString);
    }

    private void updateContent(Context context, String content) {
        Log.d(TAG, "updateContent");
        String logText = "" + Utils.logStringCache;

        if (!logText.equals("")) {
            logText += "\n";
        }

        SimpleDateFormat sDateFormat = new SimpleDateFormat("HH-mm-ss");
        logText += sDateFormat.format(new Date()) + ": ";
        logText += content;

        Utils.logStringCache = logText;

        Intent intent = new Intent();
        intent.setClass(context.getApplicationContext(), MainActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        context.getApplicationContext().startActivity(intent);
    }

	@Override
	public void onCallback(String tag, String response) {
		// TODO Auto-generated method stub
		
	}

}
